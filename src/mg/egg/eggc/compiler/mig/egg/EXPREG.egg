------------------ ***** -----------------------------
-- Migration de la grammaire de EXPREG-- vers la nouvelle syntaxe
------------------ ***** -----------------------------
--OPTIONS
option k =2;
option auto =true;
option version =5.0.0;
--ATTRIBUTS
inh vis : IVisiteurEgg for
  EXPREG , REG , TERME , APRTERME , FACTEUR , APRFACTEUR , ELT , ELTS , APRCAR;
inh table : TDS for
  EXPREG , REG , TERME , FACTEUR , APRFACTEUR , APRTERME;
syn code : STRING for
  EXPREG , SER , EER , REG , TERME , APRTERME , OP , FACTEUR , APRFACTEUR , ELT , ELTS , APRCAR;

--TERMINAUX
--          OPX,

sugar croco is "\[";
sugar crocf is "\]";
sugar paro is "\(";
sugar parf is "\)";
sugar ou is "\|";
sugar moins is "\-";
sugar etoile is "\*";
sugar plus is "\+";
sugar interro is "\?";
sugar neg is "\[\^";
sugar ser is "\^";
sugar eer is "\$";
sugar guillemet is "\"";
sugar aco is "\{";
sugar acf is "\}";
--sugar   virgule     is          "\,"   ;

sugar point is "\.";
--macro    hex   is "[0-9a-fA-F]";

macro uni is "\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]";
macro oct is "\\[0-3][0-7][0-7]";
macro esc is "(\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[0-3][0-7][0-7]|\\.)";
macro ccar is "[^\'\|\(\)\{\}\[\]\<\>\\\.\*\+\?\^\$\"\~\!]";
--term       entier      is    "[0-9]+";

term car is "((\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]|\\[0-3][0-7][0-7]|\\.)|[^\'\|\(\)\{\}\[\]\<\>\\\.\*\+\?\^\$\"\~\!])";
term t_def is "\{[a-zA-Z][a-zA-Z0-9_]*\}";

--EXTERNES

--REGLES
EXPREG-> SER REG EER #gen guillemet;
#gen{

  EXPREG^code = SER^code@REG^code@EER^code;
}

SER-> #gen;
#gen{

  SER^code = "";
}

SER-> ser #gen;
#gen{

  SER^code = "^";
}

EER-> #gen;
#gen{

  EER^code = "";
}

EER-> eer #gen;
#gen{

  EER^code = "$";
}

-- si on veut ne rien preciser ( analyseur exterieur)

REG-> #gen;
#gen{

  REG^code = "";
}

REG-> TERME APRTERME #gen;
#gen{

  REG^code = TERME^code@APRTERME^code;
}

TERME-> FACTEUR OP APRFACTEUR #gen;
#gen{

  TERME^code = FACTEUR^code@OP^code@APRFACTEUR^code;
}

APRTERME-> ou TERME APRTERME #gen;
#gen{

  APRTERME^code = "|"@TERME^code@APRTERME1^code;
}

APRTERME-> #gen;
#gen{

  APRTERME^code = "";
}

FACTEUR-> point #gen;
#gen{

  FACTEUR^code = ".";
}

FACTEUR-> car #gen;
#gen{

  FACTEUR^code = FACTEUR^vis.car(car^txt);
}

FACTEUR-> croco ELT ELTS crocf #gen;
#gen{

  FACTEUR^code = "["@ELT^code@ELTS^code@"]";
}

FACTEUR-> neg ELT ELTS crocf #gen;
#gen{

  FACTEUR^code = "[^"@ELT^code@ELTS^code@"]";
}

FACTEUR-> paro REG parf #gen;
#gen{

  FACTEUR^code = "("@REG^code@")";
}

FACTEUR-> t_def #gen;
#gen{
  STRING m;
  STRING er;
  TDS table;
  SYMBOLE s;
  TERMINAL t;

  er = "";
  m = t_def^txt.substring(1, t_def^txt.length()-1);
  table = FACTEUR^table;
  s = table.chercher(m);
  if (s==null) {
    error(EXPREG_symbol_unknown, m);
	}
  else {
    match (s) {
    case TERMINAL {
      t = s;
      if (s.get_type()==4) {
        er = s.get_expreg();
	}
      else {
        er = "";
        error(EXPREG_not_a_macro, s.getNom());
	}
      
	}
    default {
      er = "";
      error(EXPREG_not_a_macro, s.getNom());
	}
    }

	}
  
  FACTEUR^code = er;
}

OP-> etoile #gen;
#gen{

  OP^code = "*";
}

OP-> plus #gen;
#gen{

  OP^code = "+";
}

OP-> interro #gen;
#gen{

  OP^code = "?";
}

OP-> #gen;
#gen{

  OP^code = "";
}

APRFACTEUR-> FACTEUR OP APRFACTEUR #gen;
#gen{

  APRFACTEUR^code = FACTEUR^code@OP^code@APRFACTEUR1^code;
}

APRFACTEUR-> #gen;
#gen{

  APRFACTEUR^code = "";
}

ELT-> car APRCAR #gen;
#gen{

  ELT^code = ELT^vis.car(car^txt)@APRCAR^code;
}

ELTS-> ELT ELTS #gen;
#gen{

  ELTS^code = ELT^code@ELTS1^code;
}

ELTS-> #gen;
#gen{

  ELTS^code = "";
}

APRCAR-> moins car #gen;
#gen{

  APRCAR^code = "-"@APRCAR^vis.car(car^txt);
}

APRCAR-> #gen;
#gen{

  APRCAR^code = "";
}

